// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_key_collision_merge
CharacterVector cpp_key_collision_merge(const CharacterVector& vect, const Nullable<CharacterVector>& ignore_strings, const bool& bus_suffix, const Nullable<CharacterVector>& dict);
RcppExport SEXP _refinr_cpp_key_collision_merge(SEXP vectSEXP, SEXP ignore_stringsSEXP, SEXP bus_suffixSEXP, SEXP dictSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type vect(vectSEXP);
    Rcpp::traits::input_parameter< const Nullable<CharacterVector>& >::type ignore_strings(ignore_stringsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type bus_suffix(bus_suffixSEXP);
    Rcpp::traits::input_parameter< const Nullable<CharacterVector>& >::type dict(dictSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_key_collision_merge(vect, ignore_strings, bus_suffix, dict));
    return rcpp_result_gen;
END_RCPP
}
// cpp_n_gram_merge
CharacterVector cpp_n_gram_merge(const CharacterVector& vect, int numgram, const Nullable<CharacterVector>& ignore_strings, bool bus_suffix, double edit_threshold, bool approx_matching, SEXP method, SEXP weight, SEXP p, SEXP bt, SEXP q, SEXP useBytes, SEXP nthread);
RcppExport SEXP _refinr_cpp_n_gram_merge(SEXP vectSEXP, SEXP numgramSEXP, SEXP ignore_stringsSEXP, SEXP bus_suffixSEXP, SEXP edit_thresholdSEXP, SEXP approx_matchingSEXP, SEXP methodSEXP, SEXP weightSEXP, SEXP pSEXP, SEXP btSEXP, SEXP qSEXP, SEXP useBytesSEXP, SEXP nthreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type vect(vectSEXP);
    Rcpp::traits::input_parameter< int >::type numgram(numgramSEXP);
    Rcpp::traits::input_parameter< const Nullable<CharacterVector>& >::type ignore_strings(ignore_stringsSEXP);
    Rcpp::traits::input_parameter< bool >::type bus_suffix(bus_suffixSEXP);
    Rcpp::traits::input_parameter< double >::type edit_threshold(edit_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type approx_matching(approx_matchingSEXP);
    Rcpp::traits::input_parameter< SEXP >::type method(methodSEXP);
    Rcpp::traits::input_parameter< SEXP >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bt(btSEXP);
    Rcpp::traits::input_parameter< SEXP >::type q(qSEXP);
    Rcpp::traits::input_parameter< SEXP >::type useBytes(useBytesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nthread(nthreadSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_n_gram_merge(vect, numgram, ignore_strings, bus_suffix, edit_threshold, approx_matching, method, weight, p, bt, q, useBytes, nthread));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_refinr_cpp_key_collision_merge", (DL_FUNC) &_refinr_cpp_key_collision_merge, 4},
    {"_refinr_cpp_n_gram_merge", (DL_FUNC) &_refinr_cpp_n_gram_merge, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_refinr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
